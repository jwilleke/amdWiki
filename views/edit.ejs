<%- include('header', { pageName: pageName }) %>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <h1>Edit <%= pageName %></h1>
            
            <form id="editForm" action="/wiki/<%= pageName %>" method="POST">
                <!-- Page Title on its own row -->
                <div class="form-group mb-3">
                    <label for="title" style="font-weight:bold;">Page Title:</label>
                    <input type="text" id="title" name="title" class="form-control" value="<%= metadata.title || pageName %>" required>
                </div>
                
                <!-- System Category (Admin only) and User Keywords (Editable by any editor) -->
                <div class="row mb-3">
                    <% if (user && user.roles && user.roles.includes('admin')) { %>
                    <div class="col-md-6">
                        <label style="font-weight:bold;">System Category (Admin Only):</label>
                        <select class="form-control" id="systemCategory" name="system-category" required>
                            <% systemCategories.forEach(category => { %>
                                <option value="<%= category %>" <%= metadata['system-category'] === category ? 'selected' : '' %>><%= category %></option>
                            <% }); %>
                        </select>
                    </div>
                    <% } else { %>
                    <div class="col-md-6">
                        <label style="font-weight:bold;">System Category:</label>
                        <input type="hidden" id="systemCategory" name="system-category" value="<%= metadata['system-category'] %>">
                        <input type="text" class="form-control" value="<%= metadata['system-category'] %>" readonly>
                    </div>
                    <% } %>
                    <div class="col-md-6">
                        <label style="font-weight:bold;">User Keywords (Optional, Max 3):</label>
                        <div class="dropdown">
                            <button class="btn btn-outline-secondary dropdown-toggle w-100 text-start" type="button" id="userKeywordsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <span id="selectedUserKeywordsText">Select user keywords...</span>
                            </button>
                            <ul class="dropdown-menu w-100" aria-labelledby="userKeywordsDropdown">
                                <% userKeywords.forEach(keyword => { %>
                                    <li>
                                        <div class="dropdown-item-checkbox px-3 py-2">
                                            <div class="form-check">
                                                <input class="form-check-input user-keyword-checkbox" type="checkbox" name="user-keywords[]" value="<%= keyword %>" id="user-keyword-<%= keyword %>" <%= selectedUserKeywords.includes(keyword) ? 'checked' : '' %>>
                                                <label class="form-check-label ms-2" for="user-keyword-<%= keyword %>"><%= keyword %></label>
                                            </div>
                                        </div>
                                    </li>
                                <% }); %>
                            </ul>
                        </div>
                    </div>
                </div>
                
                <!-- Content -->
                <div class="form-group mb-3">
                    <label for="content" style="font-weight:bold;">Content:</label>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-header">Edit Content</div>
                                <div class="card-body p-0">
                                    <textarea id="content" name="content" class="form-control border-0 rounded-0" rows="20" style="min-height: 400px; resize: vertical;" required><%= content %></textarea>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-header">Preview</div>
                                <div class="card-body markdown-body" id="preview" style="min-height: 400px;"></div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Image Upload Section -->
                <div class="form-group mb-3">
                    <label style="font-weight:bold;">Insert Image:</label>
                    <div class="row">
                        <div class="col-md-6">
                            <input type="file" id="imageFile" class="form-control" accept="image/*">
                        </div>
                        <div class="col-md-6">
                            <button type="button" id="uploadImageBtn" class="btn btn-primary">Upload Image</button>
                            <button type="button" id="insertImageBtn" class="btn btn-secondary ms-2" disabled>Insert at Cursor</button>
                        </div>
                    </div>
                    <div id="imageUploadStatus" class="mt-2"></div>
                    <div id="uploadedImages" class="mt-3" style="display: none;">
                        <h6>Uploaded Images:</h6>
                        <div id="imageList" class="d-flex flex-wrap gap-2"></div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Update preview function
    function updatePreview() {
        const content = document.getElementById('content');
        const preview = document.getElementById('preview');
        let text = content.value;
        
        // Make an API call to get properly rendered content with user variables
        fetch('/api/preview', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                content: text,
                pageName: '<%= pageName %>'
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success && data.html) {
                preview.innerHTML = data.html;
            } else {
                // Fallback to simple markdown conversion if API fails
                text = text.replace(/^# (.*$)/gim, '<h1>$1</h1>');
                text = text.replace(/^## (.*$)/gim, '<h2>$1</h2>');
                text = text.replace(/^### (.*$)/gim, '<h3>$1</h3>');
                text = text.replace(/\*\*(.*)\*\*/g, '<strong>$1</strong>');
                text = text.replace(/\*(.*)\*/g, '<em>$1</em>');
                text = text.replace(/\n/g, '<br>');
                preview.innerHTML = text;
            }
        })
        .catch(error => {
            console.error('Preview API error:', error);
            // Fallback to simple markdown conversion
            text = text.replace(/^# (.*$)/gim, '<h1>$1</h1>');
            text = text.replace(/^## (.*$)/gim, '<h2>$1</h2>');
            text = text.replace(/^### (.*$)/gim, '<h3>$1</h3>');
            text = text.replace(/\*\*(.*)\*\*/g, '<strong>$1</strong>');
            text = text.replace(/\*(.*)\*/g, '<em>$1</em>');
            text = text.replace(/\n/g, '<br>');
            preview.innerHTML = text;
        });
    }
    
    // Update preview on input
    document.getElementById('content').addEventListener('input', updatePreview);
    updatePreview();
    // Form submission validation for system-category and user-keywords
    document.querySelector('form').addEventListener('submit', function(e) {
        // Validate system-category (should always be present)
        const systemCategory = document.getElementById('systemCategory').value;
        if (!systemCategory) {
            e.preventDefault();
            alert('System category is required');
            return false;
        }
        // Validate user-keywords (max 3, optional)
        const checkedKeywords = document.querySelectorAll('.user-keyword-checkbox:checked').length;
        if (checkedKeywords > 3) {
            e.preventDefault();
            alert('Maximum 3 user keywords allowed');
            return false;
        }
    });
    function updateSelectedUserKeywordsText() {
        const checkedKeywords = Array.from(document.querySelectorAll('.user-keyword-checkbox:checked')).map(cb => cb.value);
        const text = checkedKeywords.length > 0 ? checkedKeywords.join(', ') : 'Select user keywords...';
        document.getElementById('selectedUserKeywordsText').textContent = text;
    }
    // Initialize dropdowns
    updateSelectedUserKeywordsText();
    
    // Image upload functionality
    let uploadedImages = [];
    
    document.getElementById('uploadImageBtn').addEventListener('click', async function() {
        const fileInput = document.getElementById('imageFile');
        const statusDiv = document.getElementById('imageUploadStatus');
        const insertBtn = document.getElementById('insertImageBtn');
        
        if (!fileInput.files[0]) {
            statusDiv.innerHTML = '<div class="alert alert-warning">Please select an image file first.</div>';
            return;
        }
        
        const formData = new FormData();
        formData.append('image', fileInput.files[0]);
        
        statusDiv.innerHTML = '<div class="alert alert-info">Uploading image...</div>';
        insertBtn.disabled = true;
        
        try {
            const response = await fetch('/images/upload', {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (result.success) {
                uploadedImages.push(result);
                statusDiv.innerHTML = '<div class="alert alert-success">Image uploaded successfully!</div>';
                insertBtn.disabled = false;
                updateImageList();
                document.getElementById('uploadedImages').style.display = 'block';
            } else {
                statusDiv.innerHTML = '<div class="alert alert-danger">Upload failed: ' + result.error + '</div>';
            }
        } catch (error) {
            statusDiv.innerHTML = '<div class="alert alert-danger">Upload failed: ' + error.message + '</div>';
        }
    });
    
    document.getElementById('insertImageBtn').addEventListener('click', function() {
        if (uploadedImages.length === 0) return;
        
        const textarea = document.getElementById('content');
        const lastImage = uploadedImages[uploadedImages.length - 1];
        
        // Create Image plugin syntax
        const imageSyntax = `[{Image src='${lastImage.imagePath}' alt='${lastImage.originalName}'}]`;
        
        // Insert at cursor position or at end
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const text = textarea.value;
        const before = text.substring(0, start);
        const after = text.substring(end, text.length);
        
        textarea.value = before + imageSyntax + after;
        textarea.focus();
        textarea.setSelectionRange(start + imageSyntax.length, start + imageSyntax.length);
        
        // Update preview
        updatePreview();
    });
    
    function updateImageList() {
        const imageList = document.getElementById('imageList');
        imageList.innerHTML = '';
        
        uploadedImages.forEach((image, index) => {
            const imageItem = document.createElement('div');
            imageItem.className = 'card';
            imageItem.style.width = '150px';
            imageItem.innerHTML = `
                <img src="${image.imagePath}" class="card-img-top" style="height: 100px; object-fit: cover;" alt="${image.originalName}">
                <div class="card-body p-2">
                    <p class="card-text small mb-1">${image.originalName}</p>
                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="insertImageAtIndex(${index})">Insert</button>
                </div>
            `;
            imageList.appendChild(imageItem);
        });
    }
    
    function insertImageAtIndex(index) {
        const textarea = document.getElementById('content');
        const image = uploadedImages[index];
        
        // Create Image plugin syntax
        const imageSyntax = `[{Image src='${image.imagePath}' alt='${image.originalName}'}]`;
        
        // Insert at cursor position or at end
        const start = textarea.selectionStart;
        const end = textarea.selectionEnd;
        const text = textarea.value;
        const before = text.substring(0, start);
        const after = text.substring(end, text.length);
        
        textarea.value = before + imageSyntax + after;
        textarea.focus();
        textarea.setSelectionRange(start + imageSyntax.length, start + imageSyntax.length);
        
        // Update preview
        updatePreview();
    }
</script>

<%- include('footer') %>
