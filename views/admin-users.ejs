<%- include('header', { title: 'User Management' }) %>

<div class="container">
  <div class="row">
    <div class="col-md-12">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>
          <i class="fas fa-users"></i>
          User Management
        </h2>
        <a href="/admin" class="btn" style="background-color: var(--btn-secondary-bg); color: var(--btn-secondary-text); border-color: var(--btn-secondary-border);">
          <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>
      </div>

      <!-- Success/Error Messages -->
      <% if (successMessage) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <i class="fas fa-check-circle"></i> <%= successMessage %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>
      
      <% if (errorMessage) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <i class="fas fa-exclamation-circle"></i> <%= errorMessage %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% } %>

      <!-- User Statistics -->
      <div class="row mb-4">
        <div class="col-md-3">
          <div class="card" style="background-color: var(--card-primary-bg); color: var(--card-primary-text);">
            <div class="card-body">
              <h5 class="card-title">Total Users</h5>
              <h3><%= users.length %></h3>
            </div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="card" style="background-color: var(--card-success-bg); color: var(--card-success-text);">
            <div class="card-body">
              <h5 class="card-title">Active Users</h5>
              <h3><%= users.filter(u => u.isActive).length %></h3>
            </div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="card" style="background-color: var(--card-info-bg); color: var(--card-info-text);">
            <div class="card-body">
              <h5 class="card-title">Admin Users</h5>
              <h3><%= users.filter(u => u.roles.includes('admin')).length %></h3>
            </div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="card" style="background-color: var(--card-warning-bg); color: var(--card-warning-text);">
            <div class="card-body">
              <h5 class="card-title">System Users</h5>
              <h3><%= users.filter(u => u.isSystem).length %></h3>
            </div>
          </div>
        </div>
      </div>

      <!-- Users Table -->
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0">All Users</h5>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-striped">
              <thead>
                <tr>
                  <th>Username</th>
                  <th>Display Name</th>
                  <th>Email</th>
                  <th>Roles</th>
                  <th>Status</th>
                  <th>Last Login</th>
                  <th>Login Count</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% users.forEach(user => { %>
                <tr>
                  <td>
                    <strong><%= user.username %></strong>
                    <% if (user.isSystem) { %>
                      <span class="badge" style="background-color: var(--badge-warning-bg); color: var(--badge-warning-text);">System</span>
                    <% } %>
                  </td>
                  <td><%= user.displayName || user.username %></td>
                  <td><%= user.email || 'Not set' %></td>
                  <td>
                    <% user.roles.forEach(role => { %>
                      <span class="badge bg-<%= role === 'admin' ? 'danger' : 'secondary' %>">
                        <%= role %>
                      </span>
                    <% }); %>
                  </td>
                  <td>
                    <% if (user.isActive) { %>
                      <span class="badge" style="background-color: var(--badge-success-bg); color: var(--badge-success-text);">Active</span>
                    <% } else { %>
                      <span class="badge" style="background-color: var(--badge-danger-bg); color: var(--badge-danger-text);">Inactive</span>
                    <% } %>
                  </td>
                  <td>
                    <% if (user.lastLogin) { %>
                      <%= new Date(user.lastLogin).toLocaleDateString() %>
                    <% } else { %>
                      Never
                    <% } %>
                  </td>
                  <td><%= user.loginCount || 0 %></td>
                  <td>
                    <div class="btn-group btn-group-sm">
                      <button class="btn btn-outline-primary edit-user-btn" 
                              title="Edit User"
                              data-username="<%= user.username %>"
                              data-displayname="<%= user.displayName || '' %>"
                              data-email="<%= user.email || '' %>"
                              data-roles="<%= JSON.stringify(user.roles) %>"
                              data-isactive="<%= user.isActive %>">
                        <i class="fas fa-edit"></i>
                      </button>
                      <% if (!user.isSystem) { %>
                        <button class="btn btn-outline-danger" title="Delete User">
                          <i class="fas fa-trash"></i>
                        </button>
                      <% } %>
                    </div>
                  </td>
                </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <!-- Create New User Button -->
      <div class="mt-4">
        <button class="btn" style="background-color: var(--btn-primary-bg); color: var(--btn-primary-text); border-color: var(--btn-primary-border);" data-bs-toggle="modal" data-bs-target="#createUserModal">
          <i class="fas fa-plus"></i> Create New User
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Create User Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="createUserModalLabel">
          <i class="fas fa-user-plus"></i> Create New User
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form action="/admin/users" method="POST">
        <div class="modal-body">
          <div class="mb-3">
            <label for="username" class="form-label">Username *</label>
            <input type="text" class="form-control" id="username" name="username" required>
            <div class="form-text">Must be unique and contain only letters, numbers, and underscores.</div>
          </div>
          
          <div class="mb-3">
            <label for="displayName" class="form-label">Display Name</label>
            <input type="text" class="form-control" id="displayName" name="displayName">
            <div class="form-text">Optional: Full name or preferred display name.</div>
          </div>
          
          <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" name="email">
            <div class="form-text">Optional: Email address for notifications.</div>
          </div>
          
          <div class="mb-3">
            <label for="password" class="form-label">Password *</label>
            <input type="password" class="form-control" id="password" name="password" required>
            <div class="form-text">Minimum 6 characters.</div>
          </div>
          
          <div class="mb-3">
            <label for="confirmPassword" class="form-label">Confirm Password *</label>
            <input type="password" class="form-control" id="confirmPassword" required>
            <div class="form-text">Must match the password above.</div>
          </div>
          
          <div class="mb-3">
            <label class="form-label">Roles *</label>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="reader" id="roleReader" name="roles" checked>
              <label class="form-check-label" for="roleReader">
                Reader (Read-only access)
              </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="contributor" id="roleContributor" name="roles">
              <label class="form-check-label" for="roleContributor">
                Contributor (Can edit and create pages)
              </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="editor" id="roleEditor" name="roles">
              <label class="form-check-label" for="roleEditor">
                Editor (Can edit and create pages, and delete)
              </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="admin" id="roleAdmin" name="roles">
              <label class="form-check-label" for="roleAdmin">
                Admin (Full administrative access)
              </label>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn" style="background-color: var(--btn-secondary-bg); color: var(--btn-secondary-text); border-color: var(--btn-secondary-border);" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn" style="background-color: var(--btn-primary-bg); color: var(--btn-primary-text); border-color: var(--btn-primary-border);">
            <i class="fas fa-user-plus"></i> Create User
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editUserModalLabel">
          <i class="fas fa-user-edit"></i> Edit User
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="editUserForm">
        <div class="modal-body">
          <input type="hidden" id="editUsername" name="username">
          
          <div class="mb-3">
            <label for="editDisplayName" class="form-label">Display Name</label>
            <input type="text" class="form-control" id="editDisplayName" name="displayName">
            <div class="form-text">Optional: Full name or preferred display name.</div>
          </div>
          
          <div class="mb-3">
            <label for="editEmail" class="form-label">Email</label>
            <input type="email" class="form-control" id="editEmail" name="email">
            <div class="form-text">Optional: Email address for notifications.</div>
          </div>
          
          <div class="mb-3">
            <label for="editPassword" class="form-label">New Password</label>
            <input type="password" class="form-control" id="editPassword" name="password">
            <div class="form-text">Leave blank to keep current password.</div>
          </div>
          
          <div class="mb-3">
            <label for="editConfirmPassword" class="form-label">Confirm New Password</label>
            <input type="password" class="form-control" id="editConfirmPassword">
            <div class="form-text">Must match the new password if changing password.</div>
          </div>
          
          <div class="mb-3">
            <label class="form-label">Roles</label>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="reader" id="editRoleReader" name="roles">
              <label class="form-check-label" for="editRoleReader">
                Reader (Read-only access)
              </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="contributor" id="editRoleContributor" name="roles">
              <label class="form-check-label" for="editRoleContributor">
                Contributor (Can edit and create pages)
              </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="editor" id="editRoleEditor" name="roles">
              <label class="form-check-label" for="editRoleEditor">
                Editor (Can edit and create pages, and delete)
              </label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="admin" id="editRoleAdmin" name="roles">
              <label class="form-check-label" for="editRoleAdmin">
                Admin (Full administrative access)
              </label>
            </div>
          </div>
          
          <div class="mb-3">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="editIsActive" name="isActive">
              <label class="form-check-label" for="editIsActive">
                User is active
              </label>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn" style="background-color: var(--btn-secondary-bg); color: var(--btn-secondary-text); border-color: var(--btn-secondary-border);" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn" style="background-color: var(--btn-primary-bg); color: var(--btn-primary-text); border-color: var(--btn-primary-border);">
            <i class="fas fa-save"></i> Update User
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
// Form validation
document.addEventListener('DOMContentLoaded', function() {
  const form = document.querySelector('#createUserModal form');
  const password = document.getElementById('password');
  const confirmPassword = document.getElementById('confirmPassword');
  
  form.addEventListener('submit', function(e) {
    // Check password match
    if (password.value !== confirmPassword.value) {
      e.preventDefault();
      confirmPassword.setCustomValidity('Passwords do not match');
      confirmPassword.reportValidity();
      return false;
    }
    
    // Check password length
    if (password.value.length < 6) {
      e.preventDefault();
      password.setCustomValidity('Password must be at least 6 characters');
      password.reportValidity();
      return false;
    }
    
    // Check at least one role is selected
    const roles = document.querySelectorAll('input[name="roles"]:checked');
    if (roles.length === 0) {
      e.preventDefault();
      alert('Please select at least one role for the user.');
      return false;
    }
  });
  
  // Clear custom validity on input
  confirmPassword.addEventListener('input', function() {
    this.setCustomValidity('');
  });
  
  password.addEventListener('input', function() {
    this.setCustomValidity('');
  });

  // Edit user functionality
  const editButtons = document.querySelectorAll('.edit-user-btn');
  const editModal = document.getElementById('editUserModal');
  const editForm = document.getElementById('editUserForm');
  
  editButtons.forEach(button => {
    button.addEventListener('click', function() {
      const username = this.dataset.username;
      const displayName = this.dataset.displayname;
      const email = this.dataset.email;
      const roles = JSON.parse(this.dataset.roles);
      const isActive = this.dataset.isactive === 'true';
      
      // Populate the form
      document.getElementById('editUsername').value = username;
      document.getElementById('editDisplayName').value = displayName;
      document.getElementById('editEmail').value = email;
      document.getElementById('editPassword').value = '';
      document.getElementById('editConfirmPassword').value = '';
      document.getElementById('editIsActive').checked = isActive;
      
      // Clear all role checkboxes first
      document.getElementById('editRoleReader').checked = false;
      document.getElementById('editRoleContributor').checked = false;
      document.getElementById('editRoleEditor').checked = false;
      document.getElementById('editRoleAdmin').checked = false;
      
      // Set role checkboxes based on user's roles
      roles.forEach(role => {
        const checkbox = document.getElementById('editRole' + role.charAt(0).toUpperCase() + role.slice(1));
        if (checkbox) {
          checkbox.checked = true;
        }
      });
      
      // Show the modal
      const modal = new bootstrap.Modal(editModal);
      modal.show();
    });
  });
  
  // Edit form submission
  editForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const username = formData.get('username');
    const password = formData.get('password');
    const confirmPassword = document.getElementById('editConfirmPassword').value;
    
    // Validate password if provided
    if (password && password !== confirmPassword) {
      document.getElementById('editConfirmPassword').setCustomValidity('Passwords do not match');
      document.getElementById('editConfirmPassword').reportValidity();
      return;
    }
    
    if (password && password.length < 6) {
      document.getElementById('editPassword').setCustomValidity('Password must be at least 6 characters');
      document.getElementById('editPassword').reportValidity();
      return;
    }
    
    // Check at least one role is selected
    const selectedRoles = document.querySelectorAll('#editUserModal input[name="roles"]:checked');
    if (selectedRoles.length === 0) {
      alert('Please select at least one role for the user.');
      return;
    }
    
    // Prepare update data
    const updateData = {
      displayName: formData.get('displayName'),
      email: formData.get('email'),
      isActive: formData.has('isActive'),
      roles: Array.from(selectedRoles).map(cb => cb.value)
    };
    
    // Only include password if it's provided
    if (password) {
      updateData.password = password;
    }
    
    try {
      const response = await fetch(`/admin/users/${username}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updateData)
      });
      
      const result = await response.json();
      
      if (result.success) {
        // Close modal and reload page
        bootstrap.Modal.getInstance(editModal).hide();
        window.location.reload();
      } else {
        alert('Error updating user: ' + result.message);
      }
    } catch (error) {
      alert('Error updating user: ' + error.message);
    }
  });
  
  // Clear edit form validation on input
  document.getElementById('editConfirmPassword').addEventListener('input', function() {
    this.setCustomValidity('');
  });
  
  document.getElementById('editPassword').addEventListener('input', function() {
    this.setCustomValidity('');
  });
});</script>

<%- include('footer') %>
